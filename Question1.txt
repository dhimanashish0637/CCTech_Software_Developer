class Polygon {
	static int f = 10000;

	static class Point {
		double x;
		double y;

		public Point(double e, double d) {
			this.x = e;
			this.y = d;
		}
	};

	static boolean Segment(Point p, Point q, Point r) {
		if (q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y)
				&& q.y >= Math.min(p.y, r.y)) {
			return true;
		}
		return false;
	}

	static int orient(Point p, Point q, Point r) {
		double val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);

		if (val == 0) {
			return 0;
		}
		return (val > 0) ? 1 : 2;
	}

	static boolean Intersect(Point p1, Point q1, Point p2, Point q2) {
		int o1 = orient(p1, q1, p2);
		int o2 = orient(p1, q1, q2);
		int o3 = orient(p2, q2, p1);
		int o4 = orient(p2, q2, q1);
		if (o1 != o2 && o3 != o4) {
			return true;
		}
		if (o1 == 0 && Segment(p1, p2, q1)) {
			return true;
		}
		if (o2 == 0 && Segment(p1, q2, q1)) {
			return true;
		}
		if (o3 == 0 && Segment(p2, p1, q2)) {
			return true;
		}
		if (o4 == 0 && Segment(p2, q1, q2)) {
			return true;
		}
		return false;
	}

	static boolean Check(Point polygon[], int n, Point p) {
		if (n < 3) {
			return false;
		}
		Point ext = new Point(f, p.y);
		int count = 0, i = 0;
		do {
			int next = (i + 1) % n;
			if (Intersect(polygon[i], polygon[next], p, ext)) {

				if (orient(polygon[i], p, polygon[next]) == 0) {
					return Segment(polygon[i], p, polygon[next]);
				}

				count++;
			}
			i = next;
		} while (i != 0);
		return (count % 2 == 1);
	}

	public static void main(String[] args) {
		Point polygon[] = { new Point(-3, 2), new Point(-2, -0.8), new Point(0, 1.2), new Point(2.2, 0),
				new Point(2, 4.5) };
		int n = polygon.length;
		Point p = new Point(3, 5);
//		Point polygon[]= {new Point(1,0), new Point(8,3), new Point(8,8),new Point(1,5)};
//		int n = polygon.length;
//		Point p = new Point(3, 5);
		if (Check(polygon, n, p)) {
			System.out.println("True");
		} else {
			System.out.println("False");
		}

	}
}
